'''
Complete the function provided in the editor below. 
It has one parameter: a pointer to a Node object named that points to the head of a linked list.
Your function must return a boolean denoting whether or not there is a cycle in the list. 
If there is a cycle, return true; otherwise, return false.


Detect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.
A Node is defined as: 
 
    class Node(object):
        def __init__(self, data = None, next_node = None):
            self.data = data
            self.next = next_node
'''


def has_cycle(head):
    
    if head == None:
        return False

    hare = head.next
    turtle = head

    while turtle != hare:
        if hare == None:
            return False
        elif hare.next == None:
            return False
        turtle.next()
        hare.next()
    
    return True
        
